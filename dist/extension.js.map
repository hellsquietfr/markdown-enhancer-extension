{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://markdown-enhancer/./src/extension.ts","webpack://markdown-enhancer/external commonjs \"vscode\"","webpack://markdown-enhancer/webpack/bootstrap","webpack://markdown-enhancer/webpack/startup"],"sourcesContent":["// src/extension.ts\nimport * as vscode from 'vscode';\n\nlet suspendListContinuation = false;\n\nexport function activate(context: vscode.ExtensionContext) {\n\tconsole.log('🟢 Markdown Enhancer: activate() has run');\n\tconsole.log('🟢 Active editor language ID:', vscode.window.activeTextEditor?.document.languageId);\n\tconsole.log('🟢 Is active file Markdown?', vscode.window.activeTextEditor?.document.languageId === 'markdown');\n\tvscode.window.showInformationMessage('🟢 Markdown Enhancer is now active!');\n\n\t// ────────────────────────────────────────────────────────────\n\t// 1) Create a decoration type that paints backticks in red\n\t// ────────────────────────────────────────────────────────────\n\tconst backtickDecorationType = vscode.window.createTextEditorDecorationType({\n\t\tcolor: '#FF5555' // bright red (feel free to pick any color)\n\t});\n\n\t// Common programming languages for quick selection\n\tconst commonLanguages = [\n\t\t'javascript', 'typescript', 'python', 'java', 'csharp', 'cpp', 'c',\n\t\t'html', 'css', 'scss', 'json', 'xml', 'yaml', 'markdown',\n\t\t'bash', 'powershell', 'sql', 'php', 'ruby', 'go', 'rust',\n\t\t'swift', 'kotlin', 'dart', 'r', 'matlab', 'perl', 'lua'\n\t];\n\n\t// Function to scan the entire Markdown document and decorate every run of backticks:\n\tfunction updateBacktickDecorations(editor: vscode.TextEditor | undefined) {\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\t\tif (editor.document.languageId !== 'markdown') {\n\t\t\t// Only decorate when the active document is Markdown\n\t\t\teditor.setDecorations(backtickDecorationType, []);\n\t\t\treturn;\n\t\t}\n\n\t\tconst doc = editor.document;\n\t\tconst decorations: vscode.Range[] = [];\n\t\tconst regEx = /`+/g; // match any sequence of 1 or more backticks\n\n\t\tfor (let lineNumber = 0; lineNumber < doc.lineCount; lineNumber++) {\n\t\t\tconst lineText = doc.lineAt(lineNumber).text;\n\t\t\tlet match: RegExpExecArray | null;\n\t\t\twhile ((match = regEx.exec(lineText))) {\n\t\t\t\tconst start = new vscode.Position(lineNumber, match.index);\n\t\t\t\tconst end = new vscode.Position(lineNumber, match.index + match[0].length);\n\t\t\t\tdecorations.push(new vscode.Range(start, end));\n\t\t\t}\n\t\t}\n\n\t\teditor.setDecorations(backtickDecorationType, decorations);\n\t}\n\n\t// Whenever the active editor changes, re‐decorate:\n\tcontext.subscriptions.push(\n\t\tvscode.window.onDidChangeActiveTextEditor((editor) => {\n\t\t\tupdateBacktickDecorations(editor);\n\t\t})\n\t);\n\n\t// Whenever the document text changes, re‐decorate (only if it's the active Markdown file):\n\tcontext.subscriptions.push(\n\t\tvscode.workspace.onDidChangeTextDocument((e) => {\n\t\t\tconst active = vscode.window.activeTextEditor;\n\t\t\tif (active && e.document === active.document && active.document.languageId === 'markdown') {\n\t\t\t\tupdateBacktickDecorations(active);\n\t\t\t}\n\t\t})\n\t);\n\n\t// Immediately decorate the currently visible Markdown editor (if any):\n\tupdateBacktickDecorations(vscode.window.activeTextEditor);\n\n\t// ────────────────────────────────────────────────────────────\n\t// 2) Create a custom command for handling backtick key presses\n\t// ────────────────────────────────────────────────────────────\n\tconst backtickHandler = vscode.commands.registerCommand('markdown-enhancer.handleBacktick', async () => {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tif (!editor || editor.document.languageId !== 'markdown') {\n\t\t\t// Not in a Markdown file, just insert a regular backtick\n\t\t\tawait vscode.commands.executeCommand('default:type', { text: '`' });\n\t\t\treturn;\n\t\t}\n\n\t\tconst doc = editor.document;\n\t\tconst sel = editor.selection;\n\t\tconst pos = sel.active;\n\n\t\t// 1) Are we currently sitting between two backticks?\n\t\t//    i.e. preceding char is \"`\" and next char is \"`\"\n\t\tif (\n\t\t\tpos.character > 0 &&\n\t\t\tpos.character < doc.lineAt(pos.line).text.length &&\n\t\t\tdoc.getText(new vscode.Range(pos.translate(0, -1), pos)) === '`' &&\n\t\t\tdoc.getText(new vscode.Range(pos, pos.translate(0, 1))) === '`'\n\t\t) {\n\t\t\t// We have:  `|`  (cursor between two backticks)\n\t\t\t// The user just typed another backtick, so we want to expand\n\t\t\t// from `|`  →  ``````  (six backticks)  and put cursor in between 3rd/4th.\n\n\t\t\t// Compute the range of those two surrounding backticks:\n\t\t\tconst surroundStart = pos.translate(0, -1);\n\t\t\tconst surroundEnd = pos.translate(0, 1);\n\n\t\t\tawait editor.edit((eb) => {\n\t\t\t\teb.replace(new vscode.Range(surroundStart, surroundEnd), '``````');\n\t\t\t});\n\n\t\t\t// Place cursor between the 3rd and 4th backtick:\n\t\t\tconst newCursor = surroundStart.translate(0, 3);\n\t\t\teditor.selection = new vscode.Selection(newCursor, newCursor);\n\t\t\treturn;\n\t\t}\n\n\t\t// 2) Otherwise, we're just inserting a single backtick at the cursor →\n\t\t//    insert two backticks and put the cursor between them.\n\t\tawait editor.edit((eb) => {\n\t\t\teb.insert(pos, '``');\n\t\t});\n\t\t// Move the cursor one position to the right so it sits between the two:\n\t\tconst newPosition = pos.translate(0, 1);\n\t\teditor.selection = new vscode.Selection(newPosition, newPosition);\n\t});\n\n\tcontext.subscriptions.push(backtickHandler);\n\n\t// ────────────────────────────────────────────────────────────\n\t// 3) Enhanced Enter key handling with smart code fence completion & auto-continue-lists\n\t// ────────────────────────────────────────────────────────────\n\tconst typeInterceptor = vscode.commands.registerCommand('type', async (args) => {\n\t\tif (!args || typeof args.text !== 'string') {\n\t\t\tawait vscode.commands.executeCommand('default:type', args);\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tif (!editor || editor.document.languageId !== 'markdown') {\n\t\t\tawait vscode.commands.executeCommand('default:type', args);\n\t\t\treturn;\n\t\t}\n\n\t\t// Only intercept Enter:\n\t\tif (args.text === '\\n') {\n\t\t\tconst doc = editor.document;\n\t\t\tconst sel = editor.selection;\n\t\t\tconst pos = sel.active;\n\t\t\tconst lineText = doc.lineAt(pos.line).text;\n\t\t\tconst trimmed = lineText.trim();\n\n\t\t\t// ───────────────────────\n\t\t\t// 1) Auto‑Continue Lists\n\t\t\t// ───────────────────────\n\t\t\t//\n\t\t\t// New regex: \n\t\t\t//   ^(\\s*)([-*]|\\d+\\.)\\s*(.*)$\n\t\t\t//   1) (\\s*)        = any leading indentation  \n\t\t\t//   2) ([-*]|\\d+\\.) = either \"-\" or \"*\" or \"###.\"  \n\t\t\t//   3) \\s*          = zero-or-more spaces  \n\t\t\t//   4) (.*)         = whatever comes next (could be empty)\n\t\t\tconst listMatch = lineText.match(/^(\\s*)([-*]|\\d+\\.)\\s*(.*)$/);\n\t\t\tif (listMatch) {\n\t\t\t\tconst indent = listMatch[1]; // e.g. \"\" or \"  \"\n\t\t\t\tconst marker = listMatch[2]; // \"-\" or \"*\" or \"3.\"\n\t\t\t\tconst rest = listMatch[3]; // text after marker+space, or \"\" if none\n\n\t\t\t\t// Determine if we should *drop out* of the list vs. *continue*.\n\t\t\t\t// - If it’s a bullet (\"-\" or \"*\") AND rest is exactly empty → drop out.\n\t\t\t\t// - If it’s a number (e.g. \"3.\") and rest is empty, we still want to continue as \"4.\"\n\t\t\t\tconst isNumbered = /^\\d+\\.$/.test(marker);\n\n\t\t\t\tif (!isNumbered && rest === '') {\n\t\t\t\t\t// Bullet with no text after it: drop out of list.\n\t\t\t\t\tconst newLineText = '\\n' + indent;\n\t\t\t\t\tawait editor.edit((eb) => {\n\t\t\t\t\t\teb.insert(pos, newLineText);\n\t\t\t\t\t});\n\t\t\t\t\tconst newCursor = new vscode.Position(pos.line + 1, indent.length);\n\t\t\t\t\teditor.selection = new vscode.Selection(newCursor, newCursor);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, continue the list:\n\t\t\t\tlet nextMarker: string;\n\t\t\t\tif (marker === '-' || marker === '*') {\n\t\t\t\t\t// Bulleted list: keep the same bullet\n\t\t\t\t\tnextMarker = `${indent}${marker} `;\n\t\t\t\t} else {\n\t\t\t\t\t// Numbered list: increment the number before the dot\n\t\t\t\t\tconst numberPart = marker.slice(0, -1);      // \"3.\" → \"3\"\n\t\t\t\t\tconst nextNum = parseInt(numberPart, 10) + 1;\n\t\t\t\t\tnextMarker = `${indent}${nextNum}. `;\n\t\t\t\t}\n\n\t\t\t\t// Insert newline + nextMarker\n\t\t\t\tconst insertion = `\\n${nextMarker}`;\n\t\t\t\tawait editor.edit((eb) => {\n\t\t\t\t\teb.insert(pos, insertion);\n\t\t\t\t});\n\n\t\t\t\t// Move cursor to after the marker (so user can type immediately)\n\t\t\t\tconst newCursor = new vscode.Position(pos.line + 1, nextMarker.length);\n\t\t\t\teditor.selection = new vscode.Selection(newCursor, newCursor);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// ─────── Handle Six‑Backtick Case (“```|```” → prompt for language)\n\t\t\tif (trimmed === '``````') {\n\t\t\t\t// Show the language‐picker:\n\t\t\t\tconst chosen = await vscode.window.showQuickPick(commonLanguages, {\n\t\t\t\t\tplaceHolder: 'Select a language for the code fence (or press Esc for no language)',\n\t\t\t\t\tcanPickMany: false\n\t\t\t\t});\n\n\t\t\t\tif (chosen) {\n\t\t\t\t\t// Replace “``````” with “```chosen”, then insert blank line + closing “```”\n\t\t\t\t\tconst lineRange = doc.lineAt(pos.line).range;\n\t\t\t\t\tawait editor.edit((eb) => {\n\t\t\t\t\t\teb.replace(lineRange, `\\`\\`\\`${chosen}`);\n\t\t\t\t\t\teb.insert(lineRange.end, '\\n\\n```');\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// User canceled → just insert two newlines\n\t\t\t\t\tawait editor.edit((eb) => {\n\t\t\t\t\t\teb.insert(pos, '\\n\\n');\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Move the cursor into the blank line between the fences:\n\t\t\t\tconst newLine = pos.line + 1; // the “middle” empty line\n\t\t\t\tconst newCursor = new vscode.Position(newLine, 0);\n\t\t\t\teditor.selection = new vscode.Selection(newCursor, newCursor);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// ─────── Handle Three‑Backtick Case (“```” or “```lang”):\n\t\t\t// Only Prompt if This “```” is an Opening Fence (not a closing fence).\n\t\t\tconst codeBlockMatch = trimmed.match(/^```(\\w*)$/);\n\t\t\tif (codeBlockMatch) {\n\t\t\t\t// Count how many lines *above* this one contain a triple‐backtick\n\t\t\t\tlet countTripleFenceLinesAbove = 0;\n\t\t\t\tfor (let i = 0; i < pos.line; i++) {\n\t\t\t\t\tif (doc.lineAt(i).text.trim().startsWith('```')) {\n\t\t\t\t\t\tcountTripleFenceLinesAbove++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// If that count is even → this is *opening* fence. If odd → it's a closing fence.\n\t\t\t\tconst isOpeningFence = (countTripleFenceLinesAbove % 2 === 0);\n\t\t\t\tconst existingLang = codeBlockMatch[1]; // e.g. “python” if “```python”\n\n\t\t\t\tif (isOpeningFence) {\n\t\t\t\t\t// We’re on an opening fence. Prompt for language only if none was already typed.\n\t\t\t\t\tif (!existingLang) {\n\t\t\t\t\t\tconst chosen = await vscode.window.showQuickPick(commonLanguages, {\n\t\t\t\t\t\t\tplaceHolder: 'Select a language for the code fence (or press Esc for none)',\n\t\t\t\t\t\t\tcanPickMany: false\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (chosen) {\n\t\t\t\t\t\t\t// Replace “```” with “```chosen”, then insert blank line + closing “```”\n\t\t\t\t\t\t\tconst lineRange = doc.lineAt(pos.line).range;\n\t\t\t\t\t\t\tawait editor.edit((eb) => {\n\t\t\t\t\t\t\t\teb.replace(lineRange, `\\`\\`\\`${chosen}`);\n\t\t\t\t\t\t\t\teb.insert(lineRange.end, '\\n\\n```');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Canceled → just insert closing fence with one blank line\n\t\t\t\t\t\t\tawait editor.edit((eb) => {\n\t\t\t\t\t\t\t\teb.insert(pos, '\\n\\n```');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// “```lang” was already typed (e.g. “```javascript”) → just insert closing fence\n\t\t\t\t\t\tawait editor.edit((eb) => {\n\t\t\t\t\t\t\teb.insert(pos, '\\n\\n```');\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Move cursor into the blank line\n\t\t\t\t\tconst newLine = pos.line + 1;\n\t\t\t\t\tconst newCursor = new vscode.Position(newLine, 0);\n\t\t\t\t\teditor.selection = new vscode.Selection(newCursor, newCursor);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If this “```” is actually a *closing* fence (countTripleFenceLinesAbove is odd),\n\t\t\t\t// we do *not* prompt again. Just insert two newlines as before:\n\t\t\t\tawait editor.edit((eb) => {\n\t\t\t\t\teb.insert(pos, '\\n\\n');\n\t\t\t\t});\n\t\t\t\t// Move the cursor down two lines (so we remain after the blank line):\n\t\t\t\tconst newLine = pos.line + 2;\n\t\t\t\tconst newCursor = new vscode.Position(newLine, 0);\n\t\t\t\teditor.selection = new vscode.Selection(newCursor, newCursor);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// ─────── All Other Cases: Fall back to default Enter behavior:\n\t\t\tawait vscode.commands.executeCommand('default:type', args);\n\t\t\treturn;\n\t\t}\n\n\t\t// Any other key → default:\n\t\tawait vscode.commands.executeCommand('default:type', args);\n\t});\n\n\tcontext.subscriptions.push(typeInterceptor);\n\n\t// ────────────────────────────────────────────────────────────\n\t// 4) Quick Language Picker Command\n\t// ────────────────────────────────────────────────────────────\n\tconst insertCodeBlock = vscode.commands.registerCommand('markdown-enhancer.insertCodeBlock', async () => {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tif (!editor || editor.document.languageId !== 'markdown') {\n\t\t\tvscode.window.showWarningMessage('Open a Markdown file first!');\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectedLanguage = await vscode.window.showQuickPick(commonLanguages, {\n\t\t\tplaceHolder: 'Select a language for the code block',\n\t\t\tcanPickMany: false\n\t\t});\n\n\t\tif (selectedLanguage) {\n\t\t\tconst pos = editor.selection.active;\n\t\t\tawait editor.edit((eb) => {\n\t\t\t\teb.insert(pos, `\\`\\`\\`${selectedLanguage}\\n\\n\\`\\`\\``);\n\t\t\t});\n\n\t\t\t// Position cursor in the middle of the code block\n\t\t\tconst newLine = pos.line + 1;\n\t\t\tconst newCursor = new vscode.Position(newLine, 0);\n\t\t\teditor.selection = new vscode.Selection(newCursor, newCursor);\n\t\t}\n\t});\n\n\tcontext.subscriptions.push(insertCodeBlock);\n\n\t// ────────────────────────────────────────────────────────────\n\t// 5) Smart Header Insertion\n\t// ────────────────────────────────────────────────────────────\n\tconst insertHeader = vscode.commands.registerCommand('markdown-enhancer.insertHeader', async () => {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tif (!editor || editor.document.languageId !== 'markdown') {\n\t\t\tvscode.window.showWarningMessage('Open a Markdown file first!');\n\t\t\treturn;\n\t\t}\n\n\t\tconst headerLevel = await vscode.window.showQuickPick(\n\t\t\t['# H1', '## H2', '### H3', '#### H4', '##### H5', '###### H6'],\n\t\t\t{ placeHolder: 'Select header level' }\n\t\t);\n\n\t\tif (headerLevel) {\n\t\t\tconst headerText = await vscode.window.showInputBox({\n\t\t\t\tplaceHolder: 'Enter header text',\n\t\t\t\tprompt: 'What should the header say?'\n\t\t\t});\n\n\t\t\tif (headerText) {\n\t\t\t\tconst pos = editor.selection.active;\n\t\t\t\tawait editor.edit((eb) => {\n\t\t\t\t\teb.insert(pos, `${headerLevel.split(' ')[0]} ${headerText}\\n`);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\tcontext.subscriptions.push(insertHeader);\n\n\t// ────────────────────────────────────────────────────────────\n\t// 6) Smart Link Formatter\n\t// ────────────────────────────────────────────────────────────\n\tconst insertLink = vscode.commands.registerCommand('markdown-enhancer.insertLink', async () => {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tif (!editor || editor.document.languageId !== 'markdown') {\n\t\t\tvscode.window.showWarningMessage('Open a Markdown file first!');\n\t\t\treturn;\n\t\t}\n\n\t\tconst linkText = await vscode.window.showInputBox({\n\t\t\tplaceHolder: 'Enter link text',\n\t\t\tprompt: 'What should the link text be?'\n\t\t});\n\n\t\tif (linkText) {\n\t\t\tconst linkUrl = await vscode.window.showInputBox({\n\t\t\t\tplaceHolder: 'Enter URL',\n\t\t\t\tprompt: 'What is the URL?'\n\t\t\t});\n\n\t\t\tif (linkUrl) {\n\t\t\t\tconst pos = editor.selection.active;\n\t\t\t\tawait editor.edit((eb) => {\n\t\t\t\t\teb.insert(pos, `[${linkText}](${linkUrl})`);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\tcontext.subscriptions.push(insertLink);\n\n\t// ────────────────────────────────────────────────────────────\n\t// 7) Table generator\n\t// ────────────────────────────────────────────────────────────\n\tconst insertTable = vscode.commands.registerCommand(\n\t\t'markdown-enhancer.insertTable',\n\t\tasync () => {\n\t\t\tconst editor = vscode.window.activeTextEditor;\n\t\t\tif (!editor || editor.document.languageId !== 'markdown') {\n\t\t\t\tvscode.window.showWarningMessage('Open a Markdown file first!');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// 1) Ask for number of columns:\n\t\t\tconst columns = await vscode.window.showInputBox({\n\t\t\t\tplaceHolder: 'Number of columns (1-10)',\n\t\t\t\tprompt: 'How many columns?',\n\t\t\t\tvalidateInput: (input) => {\n\t\t\t\t\tconst num = parseInt(input);\n\t\t\t\t\tif (isNaN(num) || num < 1 || num > 10) {\n\t\t\t\t\t\treturn 'Please enter a number between 1 and 10';\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!columns) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst numCols = parseInt(columns);\n\n\t\t\t// 2) Ask for number of rows (excluding header):\n\t\t\tconst rows = await vscode.window.showInputBox({\n\t\t\t\tplaceHolder: 'Number of rows (1-10)',\n\t\t\t\tprompt: 'How many rows? (excluding header)',\n\t\t\t\tvalidateInput: (input) => {\n\t\t\t\t\tconst num = parseInt(input);\n\t\t\t\t\tif (isNaN(num) || num < 1 || num > 10) {\n\t\t\t\t\t\treturn 'Please enter a number between 1 and 10';\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!rows) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst numRows = parseInt(rows);\n\n\t\t\t// 3) Build a 2D array of strings: first row = headers, next rows = \"Cell r,c\"\n\t\t\t//    [ [\"Header 1\", \"Header 2\", …], [\"Cell 1,1\", \"Cell 1,2\", …], … ]\n\t\t\tconst tableData: string[][] = [];\n\n\t\t\t// Header names:\n\t\t\tconst headerRow: string[] = [];\n\t\t\tfor (let c = 0; c < numCols; c++) {\n\t\t\t\theaderRow.push(`Header ${c + 1}`);\n\t\t\t}\n\t\t\ttableData.push(headerRow);\n\n\t\t\t// Data rows:\n\t\t\tfor (let r = 0; r < numRows; r++) {\n\t\t\t\tconst rowArr: string[] = [];\n\t\t\t\tfor (let c = 0; c < numCols; c++) {\n\t\t\t\t\trowArr.push(`Cell ${r + 1},${c + 1}`);\n\t\t\t\t}\n\t\t\t\ttableData.push(rowArr);\n\t\t\t}\n\n\t\t\t// 4) Compute the maximum width of each column:\n\t\t\t//    colWidths[c] = the length of the longest string in tableData[all rows][c]\n\t\t\tconst colWidths: number[] = new Array(numCols).fill(0);\n\t\t\tfor (let c = 0; c < numCols; c++) {\n\t\t\t\tlet maxLen = 0;\n\t\t\t\tfor (let r = 0; r < tableData.length; r++) {\n\t\t\t\t\tmaxLen = Math.max(maxLen, tableData[r][c].length);\n\t\t\t\t}\n\t\t\t\tcolWidths[c] = maxLen;\n\t\t\t}\n\n\t\t\t// 5) Helper to pad a cell’s text to exactly `colWidths[c]` characters, left-aligned:\n\t\t\tfunction padCell(text: string, width: number): string {\n\t\t\t\tconst extraSpaces = width - text.length;\n\t\t\t\treturn text + ' '.repeat(extraSpaces);\n\t\t\t}\n\n\t\t\t// 6) Build the Markdown “header” row, the “separator” row, and each “data” row:\n\t\t\tlet tableText = '';\n\n\t\t\t// 6a) Header row:\n\t\t\ttableText += '| ';\n\t\t\tfor (let c = 0; c < numCols; c++) {\n\t\t\t\ttableText += padCell(tableData[0][c], colWidths[c]) + ' | ';\n\t\t\t}\n\t\t\ttableText += '\\n';\n\n\t\t\t// 6b) Separator row (each column’s dashes = exactly colWidths[c] long):\n\t\t\ttableText += '| ';\n\t\t\tfor (let c = 0; c < numCols; c++) {\n\t\t\t\t// e.g. if colWidths[c] is 8, this becomes \"--------\"\n\t\t\t\tconst dashLine = '-'.repeat(colWidths[c]);\n\t\t\t\ttableText += dashLine + ' | ';\n\t\t\t}\n\t\t\ttableText += '\\n';\n\n\t\t\t// 6c) Data rows:\n\t\t\tfor (let r = 1; r < tableData.length; r++) {\n\t\t\t\ttableText += '| ';\n\t\t\t\tfor (let c = 0; c < numCols; c++) {\n\t\t\t\t\ttableText += padCell(tableData[r][c], colWidths[c]) + ' | ';\n\t\t\t\t}\n\t\t\t\ttableText += '\\n';\n\t\t\t}\n\n\t\t\t// 7) Insert the entire table at the current cursor position:\n\t\t\tconst pos = editor.selection.active;\n\t\t\tawait editor.edit((eb) => {\n\t\t\t\teb.insert(pos, tableText);\n\t\t\t});\n\t\t}\n\t);\n\n\tcontext.subscriptions.push(insertTable);\n\n\t// ────────────────────────────────────────────────────────────\n\t// Refresh Table of Contents (auto-update existing TOC at any # level)\n\t// ────────────────────────────────────────────────────────────\n\tconst refreshToc = vscode.commands.registerCommand(\n\t\t'markdown-enhancer.refreshToc',\n\t\tasync () => {\n\t\t\tconst editor = vscode.window.activeTextEditor;\n\t\t\tif (!editor || editor.document.languageId !== 'markdown') {\n\t\t\t\tvscode.window.showWarningMessage('Open a Markdown file first!');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst doc = editor.document;\n\t\t\tconst fullText = doc.getText();\n\t\t\tconst lines = fullText.split(/\\r?\\n/);\n\n\t\t\t// 1) Find the TOC heading at ANY level: e.g. \"# Table of Contents\" or \"## Table of Contents\"\n\t\t\tlet tocStartLine = -1;\n\t\t\tlet tocLevel = 0; // number of '#' characters for the TOC heading we found\n\t\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\t\tconst trimmedLower = lines[i].trim().toLowerCase();\n\t\t\t\t// Match \"#...# Table of Contents\" ignoring extra spaces and case\n\t\t\t\tconst match = lines[i].match(/^(\\s*)(#{1,6})\\s*Table of Contents\\s*$/i);\n\t\t\t\tif (match) {\n\t\t\t\t\ttocStartLine = i;\n\t\t\t\t\ttocLevel = match[2].length; // e.g. \"##\" → length 2\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 2) Gather ALL headers (# to ######), skipping any that say \"Table of Contents\"\n\t\t\t//    Regex: ^(#{1,6})\\s+(.+)$\n\t\t\ttype Header = { level: number; text: string; slug: string };\n\t\t\tconst headers: Header[] = [];\n\t\t\tconst headerRegex = /^(#{1,6})\\s+(.+)$/gm;\n\t\t\tlet m: RegExpExecArray | null;\n\t\t\twhile ((m = headerRegex.exec(fullText)) !== null) {\n\t\t\t\tconst level = m[1].length;       // number of '#'s\n\t\t\t\tconst text = m[2].trim();        // heading text\n\t\t\t\tif (text.toLowerCase() === 'table of contents') {\n\t\t\t\t\tcontinue; // skip the TOC itself\n\t\t\t\t}\n\n\t\t\t\t// Generate slug (GitHub‐style):\n\t\t\t\tconst slug = text\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.replace(/[^\\w\\s-]/g, '') // remove punctuation\n\t\t\t\t\t.replace(/\\s+/g, '-')     // spaces → dashes\n\t\t\t\t\t.replace(/^-+|-+$/g, ''); // trim leading/trailing dashes\n\n\t\t\t\theaders.push({ level, text, slug });\n\t\t\t}\n\n\t\t\t// 3) Build the new TOC string. \n\t\t\t//    We always start with \"## Table of Contents\" (level 2) in the new TOC.\n\t\t\t//    If you want the new TOC to match the same level (# vs ##) as the old one,\n\t\t\t//    you could change this to `${'#'.repeat(tocLevel)} Table of Contents`.\n\t\t\t//    But for simplicity, we'll canonicalize to level‐2 (\"##\").\n\t\t\tlet newTocText = '## Table of Contents\\n\\n';\n\t\t\tfor (const h of headers) {\n\t\t\t\t// Indent H2 as top‐level entry (no indent),\n\t\t\t\t// indent H3 by two spaces, H4 by four spaces, etc.\n\t\t\t\t// Treat H1 the same as H2 (no indent).\n\t\t\t\tconst effectiveLevel = h.level <= 2 ? 2 : h.level;\n\t\t\t\tconst indent = '  '.repeat(effectiveLevel - 2);\n\t\t\t\tnewTocText += `${indent}- [${h.text}](#${h.slug})\\n`;\n\t\t\t}\n\t\t\tnewTocText += '\\n'; // blank line after TOC\n\n\t\t\t// 4) If we found an existing TOC heading, replace that block:\n\t\t\tif (tocStartLine >= 0) {\n\t\t\t\t// Determine where the existing TOC ends.\n\t\t\t\t// We stop replacing as soon as we see a heading whose level ≤ tocLevel.\n\t\t\t\t// (Because splitting at the same or higher‐level heading ends the TOC block.)\n\t\t\t\tlet tocEndLine = lines.length - 1;\n\t\t\t\tfor (let j = tocStartLine + 1; j < lines.length; j++) {\n\t\t\t\t\t// Look for any heading of level ≤ tocLevel:\n\t\t\t\t\tconst headingMatch = lines[j].match(/^(#{1,6})\\s+/);\n\t\t\t\t\tif (headingMatch) {\n\t\t\t\t\t\tconst thatLevel = headingMatch[1].length;\n\t\t\t\t\t\tif (thatLevel <= tocLevel) {\n\t\t\t\t\t\t\ttocEndLine = j - 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Build a Range from the start of the TOC line down to the line after tocEndLine\n\t\t\t\tconst startPos = new vscode.Position(tocStartLine, 0);\n\t\t\t\tconst endPos = new vscode.Position(tocEndLine + 1, 0);\n\t\t\t\tconst replaceRange = new vscode.Range(startPos, endPos);\n\n\t\t\t\tawait editor.edit((eb) => {\n\t\t\t\t\teb.replace(replaceRange, newTocText);\n\t\t\t\t});\n\n\t\t\t\t// Move cursor to the new \"## Table of Contents\" line:\n\t\t\t\tconst newCursorPos = new vscode.Position(tocStartLine, 0);\n\t\t\t\teditor.selection = new vscode.Selection(newCursorPos, newCursorPos);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// 5) If no existing TOC was found, just insert at the current cursor position:\n\t\t\tconst insertPos = editor.selection.active;\n\t\t\tawait editor.edit((eb) => {\n\t\t\t\teb.insert(insertPos, newTocText);\n\t\t\t});\n\t\t\tconst newCursorPos = new vscode.Position(insertPos.line, 0);\n\t\t\teditor.selection = new vscode.Selection(newCursorPos, newCursorPos);\n\t\t}\n\t);\n\n\tcontext.subscriptions.push(refreshToc);\n\n\t// ────────────────────────────────────────────────────────────\n\t// 8) Image insertion helper\n\t// ────────────────────────────────────────────────────────────\n\tconst insertImage = vscode.commands.registerCommand('markdown-enhancer.insertImage', async () => {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tif (!editor || editor.document.languageId !== 'markdown') {\n\t\t\tvscode.window.showWarningMessage('Open a Markdown file first');\n\t\t\treturn;\n\t\t}\n\n\t\tconst altText = await vscode.window.showInputBox({\n\t\t\tplaceHolder: 'Alt text for the image',\n\t\t\tprompt: 'Enter alt text (description of the image)'\n\t\t});\n\n\t\tif (altText === undefined) { return; }\n\n\t\tconst imageUrl = await vscode.window.showInputBox({\n\t\t\tplaceHolder: 'URL or relative path to image',\n\t\t\tprompt: 'Enter image URL or path'\n\t\t});\n\n\t\tif (imageUrl) {\n\t\t\tconst pos = editor.selection.active;\n\t\t\tawait editor.edit((eb) => {\n\t\t\t\teb.insert(pos, `![${altText}](${imageUrl})`);\n\t\t\t});\n\t\t}\n\t});\n\n\tcontext.subscriptions.push(insertImage);\n\n\t// ────────────────────────────────────────────────────────────\n\t// 9) Task List creator\n\t// ────────────────────────────────────────────────────────────\n\tconst insertTaskList = vscode.commands.registerCommand('markdown-enhancer.insertTaskList', async () => {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tif (!editor || editor.document.languageId !== 'markdown') {\n\t\t\tvscode.window.showWarningMessage('Open a Markdown file first');\n\t\t\treturn;\n\t\t}\n\n\t\t// Get number of tasks\n\t\tconst numTasksInput = await vscode.window.showInputBox({\n\t\t\tplaceHolder: 'Number of tasks (1-10)',\n\t\t\tprompt: 'How many tasks items?',\n\t\t\tvalidateInput: (input) => {\n\t\t\t\tconst num = parseInt(input);\n\t\t\t\tif (isNaN(num) || num < 1 || num > 10) {\n\t\t\t\t\treturn 'Please enter a number between 1 and 10';\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\n\t\tif (!numTasksInput) { return; }\n\t\tconst numTasks = parseInt(numTasksInput);\n\n\t\t// Generate task list\n\t\tlet taskListText = '';\n\t\tfor (let i = 0; i < numTasks; i++) {\n\t\t\ttaskListText += `; [ ] task ${i + 1}\\n`;\n\t\t}\n\n\t\t// Insert the task list\n\t\tconst pos = editor.selection.active;\n\t\tawait editor.edit((eb) => {\n\t\t\teb.insert(pos, taskListText);\n\t\t});\n\t});\n\n\tcontext.subscriptions.push(insertTaskList);\n\n\t// ────────────────────────────────────────────────────────────\n\t// 10) Text Formatting Shortcuts\n\t// ────────────────────────────────────────────────────────────\n\tconst formatText = vscode.commands.registerCommand('markdown-enhancer.formatText', async () => {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tif (!editor || editor.document.languageId !== 'markdown') {\n\t\t\tvscode.window.showWarningMessage('Open a Markdown file first!');\n\t\t\treturn;\n\t\t}\n\n\t\tconst formatOptions = [\n\t\t\t'Bold (**text**)',\n\t\t\t'Italic (*text*)',\n\t\t\t'Strikethrough (~~text~~)',\n\t\t\t'Inline Code (`text`)',\n\t\t\t'Blockquote (> text)',\n\t\t\t'Horizontal Rule (---)',\n\t\t];\n\n\t\tconst selectedFormat = await vscode.window.showQuickPick(formatOptions, {\n\t\t\tplaceHolder: 'Select text formatting'\n\t\t});\n\n\t\tif (!selectedFormat) { return; }\n\n\t\tconst selection = editor.selection;\n\t\tconst hasSelection = !selection.isEmpty;\n\t\tlet text = hasSelection ? editor.document.getText(selection) : '';\n\n\t\tlet formattedText = '';\n\t\tlet newCursorPos: vscode.Position | null = null;\n\n\t\tswitch (selectedFormat) {\n\t\t\tcase 'Bold (**text**)':\n\t\t\t\tformattedText = `**${text || 'bold text'}**`;\n\t\t\t\tif (!hasSelection) {\n\t\t\t\t\tnewCursorPos = new vscode.Position(\n\t\t\t\t\t\tselection.active.line,\n\t\t\t\t\t\tselection.active.character + 2\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Italic (*text*)':\n\t\t\t\tformattedText = `*${text || 'italic text'}*`;\n\t\t\t\tif (!hasSelection) {\n\t\t\t\t\tnewCursorPos = new vscode.Position(\n\t\t\t\t\t\tselection.active.line,\n\t\t\t\t\t\tselection.active.character + 1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Strikethrough (~~text~~)':\n\t\t\t\tformattedText = `~~${text || 'strikethrough text'}~~`;\n\t\t\t\tif (!hasSelection) {\n\t\t\t\t\tnewCursorPos = new vscode.Position(\n\t\t\t\t\t\tselection.active.line,\n\t\t\t\t\t\tselection.active.character + 2\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Inline Code (`text`)':\n\t\t\t\tformattedText = `\\`${text || 'code'}\\``;\n\t\t\t\tif (!hasSelection) {\n\t\t\t\t\tnewCursorPos = new vscode.Position(\n\t\t\t\t\t\tselection.active.line,\n\t\t\t\t\t\tselection.active.character + 1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Blockquote (> text)':\n\t\t\t\tformattedText = `> ${text || 'blockquote'}`;\n\t\t\t\tif (!hasSelection) {\n\t\t\t\t\tnewCursorPos = new vscode.Position(\n\t\t\t\t\t\tselection.active.line,\n\t\t\t\t\t\tselection.active.character + 2\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Horizontal Rule (---)':\n\t\t\t\tformattedText = `\\n---\\n`;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tawait editor.edit((eb) => {\n\t\t\tif (hasSelection) {\n\t\t\t\teb.replace(selection, formattedText);\n\t\t\t} else {\n\t\t\t\teb.insert(selection.active, formattedText);\n\t\t\t}\n\t\t});\n\n\t\t// Position cursor inside formatting if no text was selected\n\t\tif (!hasSelection && newCursorPos) {\n\t\t\teditor.selection = new vscode.Selection(newCursorPos, newCursorPos);\n\t\t}\n\t});\n\n\tcontext.subscriptions.push(formatText);\n\n\t// ────────────────────────────────────────────────────────────\n\t// 11) Table of Contents generator\n\t// ────────────────────────────────────────────────────────────\n\tconst generateToc = vscode.commands.registerCommand('markdown-enhancer.generateToc', async () => {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tif (!editor || editor.document.languageId !== 'markdown') {\n\t\t\tvscode.window.showWarningMessage('Open a Markdown file first');\n\t\t\treturn;\n\t\t}\n\n\t\tconst doc = editor.document;\n\t\tconst text = doc.getText();\n\n\t\t// Find all headers in the document\n\t\tconst headerRegex = /^(#{1,6})\\s+(.+)$/gm;\n\t\tconst headers: { level: number, text: string, slug: string }[] = [];\n\t\tlet match;\n\n\t\twhile ((match = headerRegex.exec(text)) !== null) {\n\t\t\tconst level = match[1].length;\n\t\t\tconst headerText = match[2].trim();\n\n\t\t\t// Create a slug for the header (simplified version)\n\t\t\tconst slug = headerText\n\t\t\t\t.toLowerCase()\n\t\t\t\t.replace(/[^\\w\\s-]/g, '') // Remove special chars\n\t\t\t\t.replace(/\\s+/g, '-')    // Replace spaces with hyphens\n\t\t\t\t.replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens\n\n\t\t\theaders.push({ level, text: headerText, slug });\n\t\t}\n\n\t\t// Generate TOC\n\t\tlet toc = '## Table of Contents\\n\\n';\n\n\t\tfor (const header of headers) {\n\t\t\t// Skip H1 titles and the TOC itself\n\t\t\tif (header.level === 1 || header.text === 'Table of Contents') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Add identation based on header level\n\t\t\tconst indent = '  '.repeat(header.level - 2);\n\t\t\ttoc += `${indent}- [${header.text}](#${header.slug})\\n`;\n\t\t}\n\n\t\t// Insert TOC at cursor position\n\t\tconst pos = editor.selection.active;\n\t\tawait editor.edit((eb) => {\n\t\t\teb.insert(pos, toc);\n\t\t});\n\t});\n\n\tcontext.subscriptions.push(generateToc);\n\n\t// ────────────────────────────────────────────────────────────\n\t// 12) Test Command\n\t// ────────────────────────────────────────────────────────────\n\tconst testCommand = vscode.commands.registerCommand('markdown-enhancer.test', () => {\n\t\tvscode.window.showInformationMessage('🟢 Markdown Enhancer test command executed!');\n\t});\n\n\tcontext.subscriptions.push(testCommand);\n}\n\nexport function deactivate() { }\n\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","vscode","window","showInformationMessage","backtickDecorationType","createTextEditorDecorationType","color","commonLanguages","updateBacktickDecorations","editor","document","languageId","setDecorations","doc","decorations","regEx","lineNumber","lineCount","lineText","lineAt","text","match","exec","start","Position","index","end","length","push","Range","subscriptions","onDidChangeActiveTextEditor","workspace","onDidChangeTextDocument","e","active","activeTextEditor","backtickHandler","commands","registerCommand","async","executeCommand","pos","selection","character","line","getText","translate","surroundStart","surroundEnd","edit","eb","replace","newCursor","Selection","insert","newPosition","typeInterceptor","args","trimmed","trim","listMatch","indent","marker","rest","test","newLineText","nextMarker","numberPart","slice","parseInt","insertion","chosen","showQuickPick","placeHolder","canPickMany","lineRange","range","newLine","codeBlockMatch","countTripleFenceLinesAbove","i","startsWith","isOpeningFence","existingLang","insertCodeBlock","showWarningMessage","selectedLanguage","insertHeader","headerLevel","headerText","showInputBox","prompt","split","insertLink","linkText","linkUrl","insertTable","columns","validateInput","input","num","isNaN","numCols","rows","numRows","tableData","headerRow","c","r","rowArr","colWidths","Array","fill","maxLen","Math","max","padCell","width","extraSpaces","repeat","tableText","dashLine","refreshToc","fullText","lines","tocStartLine","tocLevel","toLowerCase","headers","headerRegex","m","level","slug","newTocText","h","effectiveLevel","tocEndLine","j","headingMatch","startPos","endPos","replaceRange","newCursorPos","insertPos","insertImage","altText","undefined","imageUrl","insertTaskList","numTasksInput","numTasks","taskListText","formatText","selectedFormat","hasSelection","isEmpty","formattedText","generateToc","toc","header","testCommand","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}